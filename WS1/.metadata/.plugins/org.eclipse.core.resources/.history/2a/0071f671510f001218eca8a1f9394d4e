import static org.junit.Assert.*;

import java.io.FileNotFoundException;

import org.mule.api.*;
import org.junit.Test;
import org.mule.api.MuleMessage;
import org.mule.module.client.MuleClient;
import org.mule.tck.FunctionalTestCase;
//import org.mule.tck.FunctionalTestCase;

public class FTCtest1  extends FunctionalTestCase
{
    @Override
    protected String getConfigResources()
    {
      //return "mule-workmanager-config.xml,mule-test-transports-config.xml";
    	//return "C:\\MuleStudio\\WS1\\.mule\\apps\\mulep1\\wa.xml, C:\\MuleStudio\\WS1\\.mule\\apps\\mulep1\\mttc.xml";
    	return "C:\\MuleStudio\\WS1\\.mule\\apps\\mulep2\\dummy1.xml";
    }
    
  /*  public void testValidJob() throws Exception
    {
    	
      MuleClient client = new MuleClient(muleContext);
      MuleMessage sendResult = client.send("vm://work.new", "<valid_xml>aa</valid_xml>", null);
      assertTrue(true);
      MuleMessage result = client.request("vm://work.result", 100);
      assertTrue(result.getPayloadAsString().contains("aa"));
    }
    */
    /*
    public void testValidJob2() throws Exception
    {
    	
      MuleClient client = new MuleClient(muleContext);
      client.send("vm://work.new", "<valid_xml><a>hej</a></valid_xml>", null);
      MuleMessage result = client.request("vm://work.result2", 1000);
      assertTrue(result.getPayloadAsString().contains("hej"));
      
      client.send("vm://work.new", "<valid_xml><b>svejs</b></valid_xml>", null);
      //MuleMessage result2 = client.request("vm://work.result2", 100);
      //assertNotNull(result2.getPayloadAsString());
      
      System.out.println("result1" + result.getPayloadAsString());
      //System.out.println("result2" + result2.getPayloadAsString());
      
      assertTrue(result2.getPayloadAsString().contains("svejs"));
      assertNotSame(result, result2);
      assertNotNull(result2.getCorrelationId());
      
      //System.out.println(result.getInboundProperty("cname")); // client.getProperty("cname"));
      System.out.println(result);
      System.out.println(result.getPayloadAsString());
      assertTrue(result.getPayloadAsString().contains("hej") && result.getPayloadAsString().contains("svejs"));
      //System.out.println(result.getOutboundPropertyNames().toArray()[0]);
      for (String x : result.getPropertyNames()) {
    	  System.out.println(x);
      }
      */

      public void testValidJob3() throws Exception
      {
      	
        MuleClient client = new MuleClient(muleContext);
        //client.dispatch("vm://work.new", "<?xml version=\"1.0\" encoding=\"UTF-8\"?><myxml><vx>hejj</vx><vx>svejs</vx><vx></vx></myxml>", null);
        client.dispatch("vm://work.new", "<?xml version=\"1.0\" encoding=\"UTF-8\"?><client><person><name>sven</name></person><wallet><saldo>45</saldo></wallet></client>", null);
        //client.dispatch("vm://work.new", "<vx>hejdå</vx><vx>allihop</vx>", null);
        //client.dispatch("vm://work.new", "<myxml><valid_xml><a>hejj</a></valid_xml><valid_xml><a>svejsansada</a></valid_xml></myxml>", null);
        //client.send("vm://work.new", "<valid_xml><r>covis</r></valid_xml>", null);
        //client.send("vm://work.new", "<valid_xml><r>covis</r></valid_xml>", null);
        //client.send("vm://work.new", "<valid_xml><b>svejs</b></valid_xml>", null);
        MuleMessage result = client.request("vm://work.result2", 20000);
        System.out.println(result.getPayloadAsString());
        assertTrue(result.getPayloadAsString().contains("hej"));
        
        
        //MuleMessage result2 = client.request("vm://work.result2", 100);
        //assertNotNull(result2.getPayloadAsString());
        
        System.out.println("result1" + result.getPayloadAsString());
        //System.out.println("result2" + result2.getPayloadAsString());
        /*
        assertTrue(result2.getPayloadAsString().contains("svejs"));
        assertNotSame(result, result2);
        assertNotNull(result2.getCorrelationId());
        */
        //System.out.println(result.getInboundProperty("cname")); // client.getProperty("cname"));
        System.out.println(result);
        //System.out.println(result.getPayloadAsString());
        assertTrue(result.getPayloadAsString().contains("sven") && result.getPayloadAsString().contains("23"));
        //System.out.println(result.getOutboundPropertyNames().toArray()[0]);

     
    }
}
